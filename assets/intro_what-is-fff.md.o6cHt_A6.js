import{_ as e,o as t,c as a,R as o}from"./chunks/framework.4ewtxVQd.js";const u=JSON.parse('{"title":"What is FFF?","description":"","frontmatter":{"title":"What is FFF?"},"headers":[],"relativePath":"intro/what-is-fff.md","filePath":"intro/what-is-fff.md","lastUpdated":1682351847000}'),r={name:"intro/what-is-fff.md"},s=o('<h1 id="what-is-fff-flavored-frontmatter" tabindex="-1">What is FFF Flavored Frontmatter? <a class="header-anchor" href="#what-is-fff-flavored-frontmatter" aria-label="Permalink to &quot;What is FFF Flavored Frontmatter?&quot;">​</a></h1><p>The Flexible &amp; Functional Frontmatter Solution.</p><h2 id="motivation" tabindex="-1">Motivation <a class="header-anchor" href="#motivation" aria-label="Permalink to &quot;Motivation&quot;">​</a></h2><p>I&#39;m working on several static blog templates (see <a href="/intro/implementing.html">Implementing</a> for details),</p><p>so I&#39;d like to design a FrontMatter Variable Specs to be shared between these projects.</p><h2 id="why-not-just-reuse-the-existing-ones" tabindex="-1">Why not just reuse the existing ones? <a class="header-anchor" href="#why-not-just-reuse-the-existing-ones" aria-label="Permalink to &quot;Why not just reuse the existing ones?&quot;">​</a></h2><p>I&#39;m not satisfied with the existing (Hexo, Hugo) FrontMatter Variable Specs, they are a bit cumbersome, e.g. <code>camelCase</code>.</p><p>FFF makes naming as concise and meaningful as possible, and proposes customizable arrays like <code>flags</code>.</p><h2 id="naming-rules" tabindex="-1">Naming Rules <a class="header-anchor" href="#naming-rules" aria-label="Permalink to &quot;Naming Rules&quot;">​</a></h2><p>Use <code>snake_case</code> because it is JSON friendly and not as prone to wrong input as <code>camelCase</code>, the specific naming is chosen between common static blog generators, <a href="https://microformats.org/wiki/microformats2" target="_blank" rel="noreferrer">Microformats</a>, and <a href="https://www.jsonfeed.org/version/1.1/" target="_blank" rel="noreferrer">JSON Feed</a>.</p>',10),i=[s];function n(l,h,c,d,m,f){return t(),a("div",null,i)}const _=e(r,[["render",n]]);export{u as __pageData,_ as default};
